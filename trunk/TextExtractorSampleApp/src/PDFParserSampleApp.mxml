<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	creationComplete="_creationCompleteHandler(event)"
	title="DROP YOUR PDF FILE"
	>
	
	<mx:Script>
	<![CDATA[
		import jp.co.genephics.pavo.pdf.extractor.models.PDFOutlineEntity;
		import mx.controls.Alert;
		import jp.co.genephics.pavo.pdf.parser.events.PDFParserEvent;
		import jp.co.genephics.pavo.pdf.parser.events.PDFParserFaultEvent;
		import jp.co.genephics.pavo.pdf.parser.events.PDFParserProgressEvent;
		import jp.co.genephics.pavo.pdf.extractor.events.PDFExtractorEvent;
		import jp.co.genephics.pavo.pdf.extractor.TextExtractor;
		import mx.managers.DragManager;
		import mx.events.FlexEvent;
		
		private var _pdf:TextExtractor;
		
		private function _creationCompleteHandler(event:FlexEvent):void
		{
			addEventListener(KeyboardEvent.KEY_DOWN, _keyDownHandler);
			addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, _nativeDragEnterHandler);
			addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, _nativeDragDropHandler);
		}
		
		private function _nativeDragEnterHandler(event:NativeDragEvent):void
		{
			if (_pdfFileCheck(event.clipboard))
			{
				DragManager.acceptDragDrop(this);
			}
		}
		
		private function _nativeDragDropHandler(event:NativeDragEvent):void
		{
			var fileData:File = _pdfFileCheck(event.clipboard);
			
			if (fileData)
			{
				this.title = "PRESS ESC TO CANCEL";
				_parsePDF(fileData);
			}
		}
		
		private function _keyDownHandler(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.ESCAPE)
			{
				_cancel();
			}
		}
		
		private function _parsePDF(file:File):void
		{
			text.text = "";
			_pdf = new TextExtractor();
			_pdf.addEventListener(PDFExtractorEvent.COMPLETE, _completeHandler);
			_pdf.addEventListener(PDFParserProgressEvent.PROGRESS, _progressHandler);
			_pdf.addEventListener(PDFParserFaultEvent.FAULT, _faultHandler);
			_pdf.addEventListener(PDFParserEvent.CANCELED, _canceledHandler);
			_pdf.filePath = file.nativePath;
			_pdf.asyncParse();
		}
		
		private function _completeHandler(event:PDFExtractorEvent):void
		{
			_removeEventListeners();
			
			text.text += "\n\n========== PDFExtractor COMPLETE ==========\n\n";

			text.text += event.pdfFileEntity.file_name + "\n\n";
			
			for each (var outline:PDFOutlineEntity in event.sectionArray)
			{
				if (outline.name)
					text.text += outline.name + "\n";
				
				text.text += outline.body + "\n";
			}
		}
		
		private function _progressHandler(event:PDFParserProgressEvent):void
		{
			text.text = event.message + "\n";
		}
		
		private function _faultHandler(event:PDFParserFaultEvent):void
		{
			_removeEventListeners();
			Alert.show("Fault:"+event.faultMessage);
		}
		
		private function _canceledHandler(event:PDFParserEvent):void
		{
			_removeEventListeners();
			Alert.show("Canceled");
		}
		
		private function _pdfFileCheck(clipboard:Clipboard):File
		{
			var clipboardData:Object = clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT);
			if (!clipboardData) return null;

			var fileData:File = clipboardData[0] as File;

			if (fileData && !fileData.isDirectory && fileData.extension == "pdf")
			{
				return fileData;
			}
			return null;
		}
		
		private function _removeEventListeners():void
		{
			this.title = "DROP YOUR PDF FILE";
			_pdf.removeEventListener(PDFExtractorEvent.COMPLETE, _completeHandler);
			_pdf.removeEventListener(PDFParserProgressEvent.PROGRESS, _progressHandler);
			_pdf.removeEventListener(PDFParserFaultEvent.FAULT, _faultHandler);
			_pdf.removeEventListener(PDFParserEvent.CANCELED, _canceledHandler);
		}
		
		private function _cancel():void
		{
			_pdf.cancel();
		}
		
	]]>
	</mx:Script>
	
	<mx:TextArea
		id="text"
		editable="false"
		left="0" right="0" top="0" bottom="0"
		/>
	
</mx:WindowedApplication>
